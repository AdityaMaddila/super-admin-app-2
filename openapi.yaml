openapi: 3.0.0
info:
  title: Super Admin API
  description: API for managing users, roles, and system administration
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        roles:
          type: array
          items:
            type: string
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        permissions:
          type: array
          items:
            type: string

    AuditLog:
      type: object
      properties:
        id:
          type: integer
        action:
          type: string
        targetType:
          type: string
        targetId:
          type: integer
        Actor:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /superadmin/users:
    get:
      tags:
        - Users
      summary: List users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
      responses:
        200:
          description: Users list
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object

    post:
      tags:
        - Users
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                roleIds:
                  type: array
                  items:
                    type: integer
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /superadmin/users/{id}:
    get:
      tags:
        - Users
      summary: Get user details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

    put:
      tags:
        - Users
      summary: Update user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                roleIds:
                  type: array
                  items:
                    type: integer
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

    delete:
      tags:
        - Users
      summary: Delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /superadmin/roles:
    get:
      tags:
        - Roles
      summary: List roles
      responses:
        200:
          description: Roles list
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'

    post:
      tags:
        - Roles
      summary: Create role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Role created

  /superadmin/roles/{id}:
    put:
      tags:
        - Roles
      summary: Update role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Role updated

  /superadmin/assign-role:
    post:
      tags:
        - Roles
      summary: Assign role to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - roleId
              properties:
                userId:
                  type: integer
                roleId:
                  type: integer
      responses:
        200:
          description: Role assigned

  /superadmin/audit-logs:
    get:
      tags:
        - Audit
      summary: Get audit logs
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: userId
          in: query
          schema:
            type: integer
        - name: action
          in: query
          schema:
            type: string
      responses:
        200:
          description: Audit logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  auditLogs:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'

  /superadmin/analytics/summary:
    get:
      tags:
        - Analytics
      summary: Get system analytics
      responses:
        200:
          description: Analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                  totalRoles:
                    type: integer
                  activeUsersLast7Days:
                    type: integer